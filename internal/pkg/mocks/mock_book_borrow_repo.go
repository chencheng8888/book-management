// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repo/book_borrow.go

// Package mocks is a generated GoMock package.
package mocks

import (
	do "book-management/internal/repository/do"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBookBorrowDao is a mock of BookBorrowDao interface.
type MockBookBorrowDao struct {
	ctrl     *gomock.Controller
	recorder *MockBookBorrowDaoMockRecorder
}

// MockBookBorrowDaoMockRecorder is the mock recorder for MockBookBorrowDao.
type MockBookBorrowDaoMockRecorder struct {
	mock *MockBookBorrowDao
}

// NewMockBookBorrowDao creates a new mock instance.
func NewMockBookBorrowDao(ctrl *gomock.Controller) *MockBookBorrowDao {
	mock := &MockBookBorrowDao{ctrl: ctrl}
	mock.recorder = &MockBookBorrowDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookBorrowDao) EXPECT() *MockBookBorrowDaoMockRecorder {
	return m.recorder
}

// AddBookBorrowRecord mocks base method.
func (m *MockBookBorrowDao) AddBookBorrowRecord(ctx context.Context, bookID uint64, borrowerID string, expectedReturnTime time.Time, copyID *uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBookBorrowRecord", ctx, bookID, borrowerID, expectedReturnTime, copyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBookBorrowRecord indicates an expected call of AddBookBorrowRecord.
func (mr *MockBookBorrowDaoMockRecorder) AddBookBorrowRecord(ctx, bookID, borrowerID, expectedReturnTime, copyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBookBorrowRecord", reflect.TypeOf((*MockBookBorrowDao)(nil).AddBookBorrowRecord), ctx, bookID, borrowerID, expectedReturnTime, copyID)
}

// FuzzyQueryBookBorrowRecord mocks base method.
func (m *MockBookBorrowDao) FuzzyQueryBookBorrowRecord(ctx context.Context, pageSize, page int, opts ...func(*gorm.DB)) ([]do.BookBorrow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pageSize, page}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FuzzyQueryBookBorrowRecord", varargs...)
	ret0, _ := ret[0].([]do.BookBorrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FuzzyQueryBookBorrowRecord indicates an expected call of FuzzyQueryBookBorrowRecord.
func (mr *MockBookBorrowDaoMockRecorder) FuzzyQueryBookBorrowRecord(ctx, pageSize, page interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pageSize, page}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FuzzyQueryBookBorrowRecord", reflect.TypeOf((*MockBookBorrowDao)(nil).FuzzyQueryBookBorrowRecord), varargs...)
}

// GetBookBorrowStatistics mocks base method.
func (m *MockBookBorrowDao) GetBookBorrowStatistics(ctx context.Context, startTime, endTime time.Time) (do.BorrowStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookBorrowStatistics", ctx, startTime, endTime)
	ret0, _ := ret[0].(do.BorrowStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookBorrowStatistics indicates an expected call of GetBookBorrowStatistics.
func (mr *MockBookBorrowDaoMockRecorder) GetBookBorrowStatistics(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookBorrowStatistics", reflect.TypeOf((*MockBookBorrowDao)(nil).GetBookBorrowStatistics), ctx, startTime, endTime)
}

// GetBookRecordTotalNum mocks base method.
func (m *MockBookBorrowDao) GetBookRecordTotalNum(ctx context.Context, opt ...func(*gorm.DB)) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookRecordTotalNum", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookRecordTotalNum indicates an expected call of GetBookRecordTotalNum.
func (mr *MockBookBorrowDaoMockRecorder) GetBookRecordTotalNum(ctx interface{}, opt ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookRecordTotalNum", reflect.TypeOf((*MockBookBorrowDao)(nil).GetBookRecordTotalNum), varargs...)
}

// UpdateBorrowStatus mocks base method.
func (m *MockBookBorrowDao) UpdateBorrowStatus(ctx context.Context, bookID, copyID uint64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBorrowStatus", ctx, bookID, copyID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBorrowStatus indicates an expected call of UpdateBorrowStatus.
func (mr *MockBookBorrowDaoMockRecorder) UpdateBorrowStatus(ctx, bookID, copyID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBorrowStatus", reflect.TypeOf((*MockBookBorrowDao)(nil).UpdateBorrowStatus), ctx, bookID, copyID, status)
}

// MockBookBorrowCache is a mock of BookBorrowCache interface.
type MockBookBorrowCache struct {
	ctrl     *gomock.Controller
	recorder *MockBookBorrowCacheMockRecorder
}

// MockBookBorrowCacheMockRecorder is the mock recorder for MockBookBorrowCache.
type MockBookBorrowCacheMockRecorder struct {
	mock *MockBookBorrowCache
}

// NewMockBookBorrowCache creates a new mock instance.
func NewMockBookBorrowCache(ctrl *gomock.Controller) *MockBookBorrowCache {
	mock := &MockBookBorrowCache{ctrl: ctrl}
	mock.recorder = &MockBookBorrowCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookBorrowCache) EXPECT() *MockBookBorrowCacheMockRecorder {
	return m.recorder
}

// GetBookBorrowStatistics mocks base method.
func (m *MockBookBorrowCache) GetBookBorrowStatistics(ctx context.Context, pattern string) (do.BorrowStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookBorrowStatistics", ctx, pattern)
	ret0, _ := ret[0].(do.BorrowStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookBorrowStatistics indicates an expected call of GetBookBorrowStatistics.
func (mr *MockBookBorrowCacheMockRecorder) GetBookBorrowStatistics(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookBorrowStatistics", reflect.TypeOf((*MockBookBorrowCache)(nil).GetBookBorrowStatistics), ctx, pattern)
}

// SaveBookBorrowStatistics mocks base method.
func (m *MockBookBorrowCache) SaveBookBorrowStatistics(ctx context.Context, pattern string, num do.BorrowStatistics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBookBorrowStatistics", ctx, pattern, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBookBorrowStatistics indicates an expected call of SaveBookBorrowStatistics.
func (mr *MockBookBorrowCacheMockRecorder) SaveBookBorrowStatistics(ctx, pattern, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookBorrowStatistics", reflect.TypeOf((*MockBookBorrowCache)(nil).SaveBookBorrowStatistics), ctx, pattern, num)
}

// MockUserDao is a mock of UserDao interface.
type MockUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoMockRecorder
}

// MockUserDaoMockRecorder is the mock recorder for MockUserDao.
type MockUserDaoMockRecorder struct {
	mock *MockUserDao
}

// NewMockUserDao creates a new mock instance.
func NewMockUserDao(ctrl *gomock.Controller) *MockUserDao {
	mock := &MockUserDao{ctrl: ctrl}
	mock.recorder = &MockUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDao) EXPECT() *MockUserDaoMockRecorder {
	return m.recorder
}

// GetUserName mocks base method.
func (m *MockUserDao) GetUserName(ctx context.Context, id ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserName", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockUserDaoMockRecorder) GetUserName(ctx interface{}, id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockUserDao)(nil).GetUserName), varargs...)
}
