// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repo/book.go

// Package mocks is a generated GoMock package.
package mocks

import (
	do "book-management/internal/repository/do"
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockBookDao is a mock of BookDao interface.
type MockBookDao struct {
	ctrl     *gomock.Controller
	recorder *MockBookDaoMockRecorder
}

// MockBookDaoMockRecorder is the mock recorder for MockBookDao.
type MockBookDaoMockRecorder struct {
	mock *MockBookDao
}

// NewMockBookDao creates a new mock instance.
func NewMockBookDao(ctrl *gomock.Controller) *MockBookDao {
	mock := &MockBookDao{ctrl: ctrl}
	mock.recorder = &MockBookDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookDao) EXPECT() *MockBookDaoMockRecorder {
	return m.recorder
}

// AddBookBorrowRecord mocks base method.
func (m *MockBookDao) AddBookBorrowRecord(ctx context.Context, bookID uint64, borrowerID string, expectedReturnTime time.Time, copyID *uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBookBorrowRecord", ctx, bookID, borrowerID, expectedReturnTime, copyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBookBorrowRecord indicates an expected call of AddBookBorrowRecord.
func (mr *MockBookDaoMockRecorder) AddBookBorrowRecord(ctx, bookID, borrowerID, expectedReturnTime, copyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBookBorrowRecord", reflect.TypeOf((*MockBookDao)(nil).AddBookBorrowRecord), ctx, bookID, borrowerID, expectedReturnTime, copyID)
}

// AddBookStock mocks base method.
func (m *MockBookDao) AddBookStock(ctx context.Context, id uint64, num uint, where *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBookStock", ctx, id, num, where)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBookStock indicates an expected call of AddBookStock.
func (mr *MockBookDaoMockRecorder) AddBookStock(ctx, id, num, where interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBookStock", reflect.TypeOf((*MockBookDao)(nil).AddBookStock), ctx, id, num, where)
}

// CheckBookIfExist mocks base method.
func (m *MockBookDao) CheckBookIfExist(ctx context.Context, name, author, publisher, category string) (uint64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBookIfExist", ctx, name, author, publisher, category)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// CheckBookIfExist indicates an expected call of CheckBookIfExist.
func (mr *MockBookDaoMockRecorder) CheckBookIfExist(ctx, name, author, publisher, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBookIfExist", reflect.TypeOf((*MockBookDao)(nil).CheckBookIfExist), ctx, name, author, publisher, category)
}

// FuzzyQueryBookBorrowRecord mocks base method.
func (m *MockBookDao) FuzzyQueryBookBorrowRecord(ctx context.Context, pageSize, page int, opts ...func(*gorm.DB)) ([]do.BookBorrow, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pageSize, page}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FuzzyQueryBookBorrowRecord", varargs...)
	ret0, _ := ret[0].([]do.BookBorrow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FuzzyQueryBookBorrowRecord indicates an expected call of FuzzyQueryBookBorrowRecord.
func (mr *MockBookDaoMockRecorder) FuzzyQueryBookBorrowRecord(ctx, pageSize, page interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pageSize, page}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FuzzyQueryBookBorrowRecord", reflect.TypeOf((*MockBookDao)(nil).FuzzyQueryBookBorrowRecord), varargs...)
}

// FuzzyQueryBookID mocks base method.
func (m *MockBookDao) FuzzyQueryBookID(ctx context.Context, pageSize, page int, opts ...func(*gorm.DB)) ([]uint64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, pageSize, page}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FuzzyQueryBookID", varargs...)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FuzzyQueryBookID indicates an expected call of FuzzyQueryBookID.
func (mr *MockBookDaoMockRecorder) FuzzyQueryBookID(ctx, pageSize, page interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, pageSize, page}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FuzzyQueryBookID", reflect.TypeOf((*MockBookDao)(nil).FuzzyQueryBookID), varargs...)
}

// GetBookBorrowStatistics mocks base method.
func (m *MockBookDao) GetBookBorrowStatistics(ctx context.Context, startTime, endTime time.Time) (do.BorrowStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookBorrowStatistics", ctx, startTime, endTime)
	ret0, _ := ret[0].(do.BorrowStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookBorrowStatistics indicates an expected call of GetBookBorrowStatistics.
func (mr *MockBookDaoMockRecorder) GetBookBorrowStatistics(ctx, startTime, endTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookBorrowStatistics", reflect.TypeOf((*MockBookDao)(nil).GetBookBorrowStatistics), ctx, startTime, endTime)
}

// GetBookInfoByID mocks base method.
func (m *MockBookDao) GetBookInfoByID(ctx context.Context, id ...uint64) ([]do.BookInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookInfoByID", varargs...)
	ret0, _ := ret[0].([]do.BookInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookInfoByID indicates an expected call of GetBookInfoByID.
func (mr *MockBookDaoMockRecorder) GetBookInfoByID(ctx interface{}, id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookInfoByID", reflect.TypeOf((*MockBookDao)(nil).GetBookInfoByID), varargs...)
}

// GetBookRecordTotalNum mocks base method.
func (m *MockBookDao) GetBookRecordTotalNum(ctx context.Context, opt ...func(*gorm.DB)) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opt {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookRecordTotalNum", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookRecordTotalNum indicates an expected call of GetBookRecordTotalNum.
func (mr *MockBookDaoMockRecorder) GetBookRecordTotalNum(ctx interface{}, opt ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opt...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookRecordTotalNum", reflect.TypeOf((*MockBookDao)(nil).GetBookRecordTotalNum), varargs...)
}

// GetBookStockByID mocks base method.
func (m *MockBookDao) GetBookStockByID(ctx context.Context, id ...uint64) ([]do.BookStock, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookStockByID", varargs...)
	ret0, _ := ret[0].([]do.BookStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookStockByID indicates an expected call of GetBookStockByID.
func (mr *MockBookDaoMockRecorder) GetBookStockByID(ctx interface{}, id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookStockByID", reflect.TypeOf((*MockBookDao)(nil).GetBookStockByID), varargs...)
}

// GetBookTotalNum mocks base method.
func (m *MockBookDao) GetBookTotalNum(ctx context.Context, opts ...func(*gorm.DB)) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookTotalNum", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookTotalNum indicates an expected call of GetBookTotalNum.
func (mr *MockBookDaoMockRecorder) GetBookTotalNum(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookTotalNum", reflect.TypeOf((*MockBookDao)(nil).GetBookTotalNum), varargs...)
}

// RegisterAndAddBookStock mocks base method.
func (m *MockBookDao) RegisterAndAddBookStock(ctx context.Context, bookInfo do.BookInfo, addedNum uint, where string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAndAddBookStock", ctx, bookInfo, addedNum, where)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAndAddBookStock indicates an expected call of RegisterAndAddBookStock.
func (mr *MockBookDaoMockRecorder) RegisterAndAddBookStock(ctx, bookInfo, addedNum, where interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAndAddBookStock", reflect.TypeOf((*MockBookDao)(nil).RegisterAndAddBookStock), ctx, bookInfo, addedNum, where)
}

// UpdateBorrowStatus mocks base method.
func (m *MockBookDao) UpdateBorrowStatus(ctx context.Context, bookID, copyID uint64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBorrowStatus", ctx, bookID, copyID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBorrowStatus indicates an expected call of UpdateBorrowStatus.
func (mr *MockBookDaoMockRecorder) UpdateBorrowStatus(ctx, bookID, copyID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBorrowStatus", reflect.TypeOf((*MockBookDao)(nil).UpdateBorrowStatus), ctx, bookID, copyID, status)
}

// MockUserDao is a mock of UserDao interface.
type MockUserDao struct {
	ctrl     *gomock.Controller
	recorder *MockUserDaoMockRecorder
}

// MockUserDaoMockRecorder is the mock recorder for MockUserDao.
type MockUserDaoMockRecorder struct {
	mock *MockUserDao
}

// NewMockUserDao creates a new mock instance.
func NewMockUserDao(ctrl *gomock.Controller) *MockUserDao {
	mock := &MockUserDao{ctrl: ctrl}
	mock.recorder = &MockUserDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDao) EXPECT() *MockUserDaoMockRecorder {
	return m.recorder
}

// GetUserName mocks base method.
func (m *MockUserDao) GetUserName(ctx context.Context, id ...string) (map[string]string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range id {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserName", varargs...)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserName indicates an expected call of GetUserName.
func (mr *MockUserDaoMockRecorder) GetUserName(ctx interface{}, id ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, id...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserName", reflect.TypeOf((*MockUserDao)(nil).GetUserName), varargs...)
}

// MockBookCache is a mock of BookCache interface.
type MockBookCache struct {
	ctrl     *gomock.Controller
	recorder *MockBookCacheMockRecorder
}

// MockBookCacheMockRecorder is the mock recorder for MockBookCache.
type MockBookCacheMockRecorder struct {
	mock *MockBookCache
}

// NewMockBookCache creates a new mock instance.
func NewMockBookCache(ctrl *gomock.Controller) *MockBookCache {
	mock := &MockBookCache{ctrl: ctrl}
	mock.recorder = &MockBookCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookCache) EXPECT() *MockBookCacheMockRecorder {
	return m.recorder
}

// DeleteBookInfo mocks base method.
func (m *MockBookCache) DeleteBookInfo(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookInfo", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookInfo indicates an expected call of DeleteBookInfo.
func (mr *MockBookCacheMockRecorder) DeleteBookInfo(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookInfo", reflect.TypeOf((*MockBookCache)(nil).DeleteBookInfo), ctx, id)
}

// DeleteBookStock mocks base method.
func (m *MockBookCache) DeleteBookStock(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookStock", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookStock indicates an expected call of DeleteBookStock.
func (mr *MockBookCacheMockRecorder) DeleteBookStock(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookStock", reflect.TypeOf((*MockBookCache)(nil).DeleteBookStock), ctx, id)
}

// GetBookBorrowStatistics mocks base method.
func (m *MockBookCache) GetBookBorrowStatistics(ctx context.Context, pattern string) (do.BorrowStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookBorrowStatistics", ctx, pattern)
	ret0, _ := ret[0].(do.BorrowStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookBorrowStatistics indicates an expected call of GetBookBorrowStatistics.
func (mr *MockBookCacheMockRecorder) GetBookBorrowStatistics(ctx, pattern interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookBorrowStatistics", reflect.TypeOf((*MockBookCache)(nil).GetBookBorrowStatistics), ctx, pattern)
}

// GetBookInfoByID mocks base method.
func (m *MockBookCache) GetBookInfoByID(ctx context.Context, ids ...uint64) ([]do.BookInfo, []uint64) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookInfoByID", varargs...)
	ret0, _ := ret[0].([]do.BookInfo)
	ret1, _ := ret[1].([]uint64)
	return ret0, ret1
}

// GetBookInfoByID indicates an expected call of GetBookInfoByID.
func (mr *MockBookCacheMockRecorder) GetBookInfoByID(ctx interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookInfoByID", reflect.TypeOf((*MockBookCache)(nil).GetBookInfoByID), varargs...)
}

// GetBookStockByID mocks base method.
func (m *MockBookCache) GetBookStockByID(ctx context.Context, ids ...uint64) ([]do.BookStock, []uint64) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBookStockByID", varargs...)
	ret0, _ := ret[0].([]do.BookStock)
	ret1, _ := ret[1].([]uint64)
	return ret0, ret1
}

// GetBookStockByID indicates an expected call of GetBookStockByID.
func (mr *MockBookCacheMockRecorder) GetBookStockByID(ctx interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookStockByID", reflect.TypeOf((*MockBookCache)(nil).GetBookStockByID), varargs...)
}

// SaveBookBorrowStatistics mocks base method.
func (m *MockBookCache) SaveBookBorrowStatistics(ctx context.Context, pattern string, num do.BorrowStatistics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBookBorrowStatistics", ctx, pattern, num)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBookBorrowStatistics indicates an expected call of SaveBookBorrowStatistics.
func (mr *MockBookCacheMockRecorder) SaveBookBorrowStatistics(ctx, pattern, num interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookBorrowStatistics", reflect.TypeOf((*MockBookCache)(nil).SaveBookBorrowStatistics), ctx, pattern, num)
}

// SaveBookInfo mocks base method.
func (m *MockBookCache) SaveBookInfo(ctx context.Context, infos ...do.BookInfo) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range infos {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBookInfo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBookInfo indicates an expected call of SaveBookInfo.
func (mr *MockBookCacheMockRecorder) SaveBookInfo(ctx interface{}, infos ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, infos...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookInfo", reflect.TypeOf((*MockBookCache)(nil).SaveBookInfo), varargs...)
}

// SaveBookStock mocks base method.
func (m *MockBookCache) SaveBookStock(ctx context.Context, stocks ...do.BookStock) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range stocks {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveBookStock", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBookStock indicates an expected call of SaveBookStock.
func (mr *MockBookCacheMockRecorder) SaveBookStock(ctx interface{}, stocks ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, stocks...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBookStock", reflect.TypeOf((*MockBookCache)(nil).SaveBookStock), varargs...)
}
